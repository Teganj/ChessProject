Index: ChessProject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.util.*;\r\nimport javax.swing.*;\r\n\r\n/*\r\n\tThis class can be used as a starting point for creating your Chess game project. The only piece that \r\n\thas been coded is a white pawn...a lot done, more to do!\r\n*/\r\n \r\npublic class ChessProject extends JFrame implements MouseListener, MouseMotionListener {\r\n    JLayeredPane layeredPane;\r\n    JPanel chessBoard;\r\n    JLabel chessPiece;\r\n    int xAdjustment;\r\n    int yAdjustment;\r\n\tint startX;\r\n\tint startY;\r\n\tint initialX;\r\n\tint initialY;\r\n\tJPanel panels;\r\n\tJLabel pieces;\r\n\t\r\n \r\n    public ChessProject(){\r\n        Dimension boardSize = new Dimension(600, 600);\r\n \r\n        //  Use a Layered Pane for this application\r\n        layeredPane = new JLayeredPane();\r\n        getContentPane().add(layeredPane);\r\n        layeredPane.setPreferredSize(boardSize);\r\n        layeredPane.addMouseListener(this);\r\n        layeredPane.addMouseMotionListener(this);\r\n\r\n        //Add a chess board to the Layered Pane \r\n        chessBoard = new JPanel();\r\n        layeredPane.add(chessBoard, JLayeredPane.DEFAULT_LAYER);\r\n        chessBoard.setLayout( new GridLayout(8, 8) );\r\n        chessBoard.setPreferredSize( boardSize );\r\n        chessBoard.setBounds(0, 0, boardSize.width, boardSize.height);\r\n \r\n        for (int i = 0; i < 64; i++) {\r\n            JPanel square = new JPanel( new BorderLayout() );\r\n            chessBoard.add( square );\r\n \r\n            int row = (i / 8) % 2;\r\n            if (row == 0)\r\n                square.setBackground( i % 2 == 0 ? Color.white : Color.gray );\r\n            else\r\n                square.setBackground( i % 2 == 0 ? Color.gray : Color.white );\r\n        }\r\n \r\n        // Setting up the Initial Chess board.\r\n\t\tfor(int i=8;i < 16; i++){\t\t\t\r\n       \t\tpieces = new JLabel( new ImageIcon(\"WhitePawn.png\") );\r\n\t\t\tpanels = (JPanel)chessBoard.getComponent(i);\r\n\t        panels.add(pieces);\t        \r\n\t\t}\r\n\t\tpieces = new JLabel( new ImageIcon(\"WhiteRook.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(0);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"WhiteKnight.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(1);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"WhiteKnight.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(6);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"WhiteBishup.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(2);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"WhiteBishup.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(5);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"WhiteKing.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(3);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"WhiteQueen.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(4);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"WhiteRook.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(7);\r\n\t    panels.add(pieces);\r\n\t\tfor(int i=48;i < 56; i++){\t\t\t\r\n       \t\tpieces = new JLabel( new ImageIcon(\"BlackPawn.png\") );\r\n\t\t\tpanels = (JPanel)chessBoard.getComponent(i);\r\n\t        panels.add(pieces);\t        \r\n\t\t}\r\n\t\tpieces = new JLabel( new ImageIcon(\"BlackRook.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(56);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"BlackKnight.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(57);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"BlackKnight.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(62);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"BlackBishup.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(58);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"BlackBishup.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(61);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"BlackKing.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(59);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"BlackQueen.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(60);\r\n\t    panels.add(pieces);\r\n\t\tpieces = new JLabel( new ImageIcon(\"BlackRook.png\") );\r\n\t\tpanels = (JPanel)chessBoard.getComponent(63);\r\n\t    panels.add(pieces);\t\t\r\n    }\r\n\r\n\t/*\r\n\t\tThis method checks if there is a piece present on a particular square.\r\n\t*/\r\n\tprivate Boolean piecePresent(int x, int y){\r\n\t\tComponent c = chessBoard.findComponentAt(x, y);\r\n\t\tif(c instanceof JPanel){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*\r\n\t\tThis is a method to check if a piece is a Black piece.\r\n\t*/\r\n\tprivate Boolean checkWhiteOponent(int newX, int newY){\r\n\t\tBoolean oponent;\r\n\t\tComponent c1 = chessBoard.findComponentAt(newX, newY);\r\n\t\tJLabel awaitingPiece = (JLabel)c1;\r\n\t\tString tmp1 = awaitingPiece.getIcon().toString();\t\t\t\r\n\t\tif(((tmp1.contains(\"Black\")))){\r\n\t\t\toponent = true;\r\n\t\t}\r\n\t\telse{\r\n\t\t\toponent = false; \r\n\t\t}\t\t\r\n\t\treturn oponent;\r\n\t}\t\r\n \r\n\t/*\r\n\t\tThis method is called when we press the Mouse. So we need to find out what piece we have \r\n\t\tselected. We may also not have selected a piece!\r\n\t*/\r\n    public void mousePressed(MouseEvent e){\r\n        chessPiece = null;\r\n        Component c =  chessBoard.findComponentAt(e.getX(), e.getY());\r\n        if (c instanceof JPanel) \r\n\t\t\treturn;\r\n \r\n        Point parentLocation = c.getParent().getLocation();\r\n        xAdjustment = parentLocation.x - e.getX();\r\n        yAdjustment = parentLocation.y - e.getY();\r\n        chessPiece = (JLabel)c;\r\n\t\tinitialX = e.getX();\r\n\t\tinitialY = e.getY();\r\n\t\tstartX = (e.getX()/75);\r\n\t\tstartY = (e.getY()/75);\r\n        chessPiece.setLocation(e.getX() + xAdjustment, e.getY() + yAdjustment);\r\n        chessPiece.setSize(chessPiece.getWidth(), chessPiece.getHeight());\r\n        layeredPane.add(chessPiece, JLayeredPane.DRAG_LAYER);\r\n    }\r\n   \r\n    public void mouseDragged(MouseEvent me) {\r\n        if (chessPiece == null) return;\r\n         chessPiece.setLocation(me.getX() + xAdjustment, me.getY() + yAdjustment);\r\n     }\r\n     \r\n \t/*\r\n\t\tThis method is used when the Mouse is released...we need to make sure the move was valid before \r\n\t\tputting the piece back on the board.\r\n\t*/\r\n    public void mouseReleased(MouseEvent e) {\r\n        if(chessPiece == null) return;\r\n \r\n        chessPiece.setVisible(false);\r\n\t\tBoolean success =false;\r\n        Component c =  chessBoard.findComponentAt(e.getX(), e.getY());\r\n\t\tString tmp = chessPiece.getIcon().toString();\r\n\t\tString pieceName = tmp.substring(0, (tmp.length()-4));\r\n\t\tBoolean validMove = false;\r\n\r\n\t\t/*\r\n\t\t\tThe only piece that has been enabled to move is a White Pawn...but we should really have this is a separate\r\n\t\t\tmethod somewhere...how would this work.\r\n\t\t\t\r\n\t\t\tSo a Pawn is able to move two squares forward one its first go but only one square after that. \r\n\t\t\tThe Pawn is the only piece that cannot move backwards in chess...so be careful when committing \r\n\t\t\ta pawn forward. A Pawn is able to take any of the opponentâ€™s pieces but they have to be one \r\n\t\t\tsquare forward and one square over, i.e. in a diagonal direction from the Pawns original position. \r\n\t\t\tIf a Pawn makes it to the top of the other side, the Pawn can turn into any other piece, for \r\n\t\t\tdemonstration purposes the Pawn here turns into a Queen.\r\n\t\t*/\r\n\t\tif(pieceName.equals(\"WhitePawn\")){\r\n\t\t\tif(startY == 1)\r\n\t\t\t{\r\n\t\t\t\tif((startX == (e.getX()/75))&&((((e.getY()/75)-startY)==1)||((e.getY()/75)-startY)==2))\r\n\t\t\t\t{\r\n\t\t\t\t\tif((((e.getY()/75)-startY)==2)){\r\n\t\t\t\t\t\tif((!piecePresent(e.getX(), (e.getY())))&&(!piecePresent(e.getX(), (e.getY()+75)))){\r\n\t\t\t\t\t\t\tvalidMove = true;\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tvalidMove = false;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tif((!piecePresent(e.getX(), (e.getY()))))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvalidMove = true;\t\t\t\t\t\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tvalidMove = false;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvalidMove = false;\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tint newY = e.getY()/75;\r\n\t\t\t\tint newX = e.getX()/75;\t\t\t\t\r\n\t\t\t\tif((startX-1 >=0)||(startX +1 <=7))\r\n\t\t\t\t{\r\n\t\t\t\t\tif((piecePresent(e.getX(), (e.getY())))&&((((newX == (startX+1)&&(startX+1<=7)))||((newX == (startX-1))&&(startX-1 >=0)))))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(checkWhiteOponent(e.getX(), e.getY())){\r\n\t\t\t\t\t\t\tvalidMove = true;\r\n\t\t\t\t\t\t\tif(startY == 6){\r\n\t\t\t\t\t\t\t\tsuccess = true;\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tvalidMove = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tif(!piecePresent(e.getX(), (e.getY()))){\r\n\t\t\t\t\t\t\tif((startX == (e.getX()/75))&&((e.getY()/75)-startY)==1){\r\n\t\t\t\t\t\t\t\tif(startY == 6){\r\n\t\t\t\t\t\t\t\t\tsuccess = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvalidMove = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tvalidMove = false;\r\n\t\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tvalidMove = false;\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvalidMove = false;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tif(!validMove){\t\t\r\n\t\t\tint location=0;\r\n\t\t\tif(startY ==0){\r\n\t\t\t\tlocation = startX;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlocation  = (startY*8)+startX;\r\n\t\t\t}\r\n\t\t\tString pieceLocation = pieceName+\".png\"; \r\n\t\t\tpieces = new JLabel( new ImageIcon(pieceLocation) );\r\n\t\t\tpanels = (JPanel)chessBoard.getComponent(location);\r\n\t\t    panels.add(pieces);\t\t\t\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(success){\r\n\t\t\t\tint location = 56 + (e.getX()/75);\r\n\t\t\t\tif (c instanceof JLabel){\r\n\t            \tContainer parent = c.getParent();\r\n\t            \tparent.remove(0);\r\n\t\t\t\t\tpieces = new JLabel( new ImageIcon(\"WhiteQueen.png\") );\r\n\t\t\t\t\tparent = (JPanel)chessBoard.getComponent(location);\r\n\t\t\t    \tparent.add(pieces);\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tContainer parent = (Container)c;\r\n\t            \tpieces = new JLabel( new ImageIcon(\"WhiteQueen.png\") );\r\n\t\t\t\t\tparent = (JPanel)chessBoard.getComponent(location);\r\n\t\t\t    \tparent.add(pieces);\t            \t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif (c instanceof JLabel){\r\n\t            \tContainer parent = c.getParent();\r\n\t            \tparent.remove(0);\r\n\t            \tparent.add( chessPiece );\r\n\t        \t}\r\n\t        \telse {\r\n\t            \tContainer parent = (Container)c;\r\n\t            \tparent.add( chessPiece );\r\n\t        \t}\r\n\t    \t\tchessPiece.setVisible(true);\t\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n \r\n    public void mouseClicked(MouseEvent e) {\r\n\t\r\n    }\r\n    public void mouseMoved(MouseEvent e) {\r\n   }\r\n    public void mouseEntered(MouseEvent e){\r\n\t\r\n    }\r\n    public void mouseExited(MouseEvent e) {\r\n\t\r\n    }\r\n \t\r\n\t/*\r\n\t\tMain method that gets the ball moving.\r\n\t*/\r\n    public static void main(String[] args) {\r\n        JFrame frame = new ChessProject();\r\n        frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE );\r\n        frame.pack();\r\n        frame.setResizable(true);\r\n        frame.setLocationRelativeTo( null );\r\n        frame.setVisible(true);\r\n     }\r\n}\r\n\r\n\r\n
===================================================================
diff --git a/ChessProject.java b/ChessProject.java
--- a/ChessProject.java	
+++ b/ChessProject.java	
@@ -65,10 +65,10 @@
 		pieces = new JLabel( new ImageIcon("WhiteKnight.png") );
 		panels = (JPanel)chessBoard.getComponent(6);
 	    panels.add(pieces);
-		pieces = new JLabel( new ImageIcon("WhiteBishup.png") );
+		pieces = new JLabel( new ImageIcon("WhiteBishop.png") );
 		panels = (JPanel)chessBoard.getComponent(2);
 	    panels.add(pieces);
-		pieces = new JLabel( new ImageIcon("WhiteBishup.png") );
+		pieces = new JLabel( new ImageIcon("WhiteBishop.png") );
 		panels = (JPanel)chessBoard.getComponent(5);
 	    panels.add(pieces);
 		pieces = new JLabel( new ImageIcon("WhiteKing.png") );
@@ -94,10 +94,10 @@
 		pieces = new JLabel( new ImageIcon("BlackKnight.png") );
 		panels = (JPanel)chessBoard.getComponent(62);
 	    panels.add(pieces);
-		pieces = new JLabel( new ImageIcon("BlackBishup.png") );
+		pieces = new JLabel( new ImageIcon("BlackBishop.png") );
 		panels = (JPanel)chessBoard.getComponent(58);
 	    panels.add(pieces);
-		pieces = new JLabel( new ImageIcon("BlackBishup.png") );
+		pieces = new JLabel( new ImageIcon("BlackBishop.png") );
 		panels = (JPanel)chessBoard.getComponent(61);
 	    panels.add(pieces);
 		pieces = new JLabel( new ImageIcon("BlackKing.png") );
